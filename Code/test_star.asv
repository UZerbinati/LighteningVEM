clear;
clc;
close all;

%% PARAMETERS OF THE MESH
n       = 4;                                                                                         %Number of squares for each row
perc    = 90;                                                                                        %Size of the star (integer between 0 and 100)
n_stars = n^2;

meshname = 'meshes/star_' + string(n) + '_' + string(perc) + '.mat';                                 %Mesh name

%% MEMORY ALLOCATION
u_cm   = zeros(6*n_stars,1);                                                                         %U with the conforming map
u_int  = zeros(6*n_stars,1);                                                                         %U with the linear interpolation technique
u_real = zeros(6*n_stars,1);                                                                         %U real solution

%% CREATION OF THE MESH
if(~isfile(meshname))                                                                                %Check if the mesh already exists

    vem_star_domain(n,perc);                                                                         %Create the mesh

end

%% SOLVE THE PDE
load(meshname)                                                                                       %Load the mesh
u = vem(meshname, @square_domain_rhs, @square_domain_boundary_condition);                            %Solve the PDE

%% C  ONFORMING MAP
s = size(elements,1);                                                                                %Number of element

figure
for t = 1:s                                                                                          %For each element

    disp(t);
    I = elements{t};                                                                                 %Indexes of the nodes of the elements
    V = vertices(I, :);                                                                              %Coordinates of the vertices
    C = complex(V(:,1),V(:,2));                                                                      %Convert to complex numbers
    nBC = size(C,1);                                                                                 %Number of edges

    for j=1:nBC                                                                                      %For each edge

        if j+1 <= nBC                                                                                %Check if it is the last edge
            BCs{j,1} = @(z) linearBC(z,C(j),C(j+1),u(I(j)),u(I(j+1)));                               %Boundary condition on the edge
        else
            BCs{j,1} = @(z) linearBC(z,C(j),C(1),u(I(j)),u(I(1)));
        end

    end

    [u_vem] = laplace(C,BCs,'tol',1e-6);                                                             %Compute the laplace solution on the element

    if (mod(t,5) == 0)                                                                               %If we are on a star element

        elem{1} = [I(1); I(2); I(8)];                                                                %We decompose the star in six triangles
        elem{2} = [I(3); I(4); I(2)];
        elem{3} = [I(5); I(6); I(4)];
        elem{4} = [I(7); I(8); I(6)];
        elem{5} = [I(2); I(4); I(8)];
        elem{6} = [I(6); I(8); I(4)];

        for j = 1:6                                                                                  %For each triangle
            
            vv = elem{j};                                                                            %Indexes of the triangle
            xx = vertices(vv,1);                                                                     %X coordinates of the vertices
            yy = vertices(vv,2);                                                                     %Y coordinate of the vertices
            
            [xc, yc] = centroid(xx, yy);                                                             %Centroid of the triangle

            u_cm(6*(t/5-1)+j,:) = u_vem(xc + 1i*yc);                                                 %Pointwise value with the conforming map

            B   = [xx(2) - xx(1), xx(3)- xx(1); yy(2) - yy(1), yy(3) - yy(1)];                       %Matrix transformation from the referal triangle 
            rif = B\([xc;yc] - [xx(1); yy(1)]);                                                      %Coordinate of the centroid in the referal triangle

            u_int(6*(t/5-1)+j,:) = u(vv(1)) * (1 - rif(1) - rif(2)) ...                              
                                 + u(vv(2)) * rif(1) + u(vv(3)) * rif(2);
            
            u_real(6*(t/5-1)+j,:) = sin(pi*xc(1))*sin(yc(1)*pi);
           
        end
    end
end
axis("square"), colorbar



function [xc, yc] = centroid(x,y)

    xc = 1/3 * sum(x);
    yc = 1/3 * sum(y);

end